from collections import defaultdict, deque, Counter
# d = deque()
# d.append(5)
# x = d.popleft()
import re
# m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist") 
# # or re.search
# >>> m.group(0)       # The entire match
# 'Isaac Newton'
# >>> m.group(1)       # The first parenthesized subgroup.
# 'Isaac'
# >>> m.group(2)       # The second parenthesized subgroup.
# 'Newton'
# >>> m.group(1, 2)    # Multiple arguments give us a tuple.
# ('Isaac', 'Newton')
from heapq import heappush, heappop
# >>> heap = []
# >>> data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]
# >>> for item in data:
# ...     heappush(heap, item)
# heap[0] is the smallest item
import string
# string.ascii_lowercase == 'abcde...'
# string.ascii_uppercase == 'ABCDE...'
from functools import lru_cache
# @lru_cache(maxsize=None)

import sys

sys.setrecursionlimit(100000)

def get_ints(s):
    return list(map(int, re.findall(r"-?\d+", s)))  # copied from mcpower from mserrano on betaveros' recommendation
def get_nonints(s):
    return list(re.findall(r"-?[RL]+", s))
dirs = [(0,1), (1,0), (0,-1), (-1,0)]
directions = 'RDLU'
octs = [(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1),(-1,0),(-1,1)]
def is_grid_valid(n,m, r,c,):
    return (0<=r<n) and (0<=c<m)
def sign_of(x):
    if x==0:
        return 0
    return x/abs(x)

def get_zone(r,c):
    return 3 * (r//50) + c//50


transition_map = {
    1: {'U': (9, 'R'), 'L': (6, 'R')},
    2: {'U': (9, 'U'), 'R': (7, 'L'), 'D':(4, 'L')},
    4: {'L': (6, 'D'), 'R': (2, 'U')},
    6: {'L': (1, 'R'), 'U': (4, 'R')},
    7: {'D': (9, 'L'), 'R': (2, 'L')},
    9: {'L': (1, 'D'), 'D': (2, 'D'), 'R': (7, 'U')},
}
def transition(zone, r,c, direction):
    print(zone, r,c, direction)
    internal_r, internal_c = r%50, c%50
    zone_to, new_direction = transition_map[zone][direction]
    pertinent_coord = internal_r if direction in 'LR' else internal_c
    if new_direction == 'U':
        new_internal_r, new_internal_c = 49, pertinent_coord
    elif new_direction=='D':
        new_internal_r, new_internal_c = 0, pertinent_coord
    elif new_direction=='L':
        new_internal_r, new_internal_c = pertinent_coord, 49
    else:
        new_internal_r, new_internal_c = pertinent_coord, 0
    row = 50 * (zone_to//3)
    col = 50 * (zone_to%3)
    return row + new_internal_r, col + new_internal_c, new_direction


    

if True:
    instructions
    # instructions = "10R5L5R10L4R5L5"
    ans = 0
    inps = []
    while True:
        try:
            inps.append(input())
        except EOFError:
            break
    R = len(inps)
    C = max(len(inp) for inp in inps)
    inps = [inp.ljust(C) for inp in inps]
    r,c = (0, inps[0].index('.'))
    ints = get_ints(instructions)
    turns = get_nonints(instructions) + [None]
    # print(list(zip(ints, turns)))
    direction = 'R'
    for x, turn in zip(ints, turns):
        # print(x, turn)
        for i in range(x):
            dr,dc = dirs[directions.index(direction)]
            zone = get_zone(r,c)
            print(r,c,zone)
            nr,nc = (r+dr), (c+dc)
            if (not is_grid_valid(R,C, nr,nc)) or inps[nr][nc] == ' ':
                print(direction, dr,dc)
                nr, nc, direction = transition(zone, r, c, direction)
                        
            # # symbol = inps[r][c]
            # while inps[nr][nc]==' ':
            #     nr,nc = (nr+dr)%R, (nc+dc)%C
            if inps[nr][nc] == '#':
                break
            else:
                r,c = nr,nc
            print(r,c, direction)
        if turn is not None:
            direction = directions[(directions.index(direction) + (1 if turn=='R' else -1))%4]
        print(direction)
    r += 1
    c += 1
    print(direction)
    ans = r * 1000 + 4 * c + directions.index(direction)
    

    print(ans)
else:
    pass